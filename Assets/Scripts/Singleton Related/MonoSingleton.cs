using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MonoSingleton<T> : MonoBehaviour where T : MonoBehaviour
{
	/// <summary>
	/// Is this instance already initialized?
	/// </summary>
	protected bool _isReady = false;


	/// <summary>
	/// Private Singleton field.
	/// </summary>
	private static T __Instance;

	/// <summary>
	/// Helper lock object to prevent multithreaded creation.
	/// </summary>
	private static readonly object __Locker = new object();


	/// <summary>
	/// Prevents from creating object in the destruction phase.
	/// </summary>
	public static bool IsApplicationQuitting
	{
		get;
		private set;
	} = false;


	/// <summary>
	/// Static singleton (manager) reference.
	/// </summary>
	public static T Instance
	{
		get
		{
			//	If application is quitting, then return null.
			if (IsApplicationQuitting)
			{
				Debug.LogWarning("[Singleton] Instance '" + typeof(T) + "' already destroyed on application quit." +
					" Won't create again - returning null.");
				return null;
			}

			//	If application if running then apply lock
			lock (__Locker)
			{
				//	If reference if null...
				if (__Instance == null)
				{
					//	... find existing object of type T in scene
					__Instance = (T)FindObjectOfType(typeof(T));

					//	If object was found, then add to it DDOL scene
					if (__Instance != null)
					{
						DontDestroyOnLoad(__Instance);
					}

					//	If there were more objects of type T found, then something is wrong
					if (FindObjectsOfType(typeof(T)).Length > 1)
					{
						Debug.LogError("[Singleton] Something went really wrong - there should never be more than 1 singleton!" +
							" Reopenning the scene might fix it.");
						return __Instance;
					}

					//	And if instance is still null then create object
					if (__Instance == null)
					{
						//	Create empty GO, rename it and add to it component
						GameObject singleton = new GameObject
						{
							name = typeof(T).ToString() + " (Autogenerated singleton)"
						};
						__Instance = singleton.AddComponent<T>();

						//	Add created object to DDOL scene
						DontDestroyOnLoad(singleton);
					}
				}

				//	Return existing instance in the end
				return __Instance;
			}
		}
	}


	/// <summary>
	/// Singleton initializer.
	/// </summary>
	public virtual void Initialize()
	{
		////Debug.Log("Initialization of " + typeof(T).ToString());
		_isReady = true;
	}


	/// <summary>
	/// Sets IsApplicationQuitting to true, so there wouldn't be creation of an instance invoke
	/// by accident.
	/// </summary>
	protected virtual void OnApplicationQuit()
	{
		IsApplicationQuitting = true;
	}

	/// <summary>
	/// Nullifies instance reference.
	/// </summary>
	protected virtual void OnDestroy()
	{
		__Instance = null;
	}
}
